window.SIDEBAR_ITEMS = {"constant":[["HISTORY_SIZE","Default size of the [`FileBackedHistory`] used when calling [`FileBackedHistory::default()`]"]],"enum":[["CommandLineSearch","Ways to search for a particular command line in the [`History`]"],["DefaultPromptSegment","A struct to control the appearance of the left or right prompt in a [`DefaultPrompt`]"],["EditCommand","Editing actions which can be mapped to key bindings."],["Event","Represents an event."],["HistoryNavigationQuery","Browsing modes for a [`History`]"],["KeyCode","Represents a key."],["MenuEvent","Defines all possible events that could happen with a menu."],["PromptEditMode","Modes that the prompt can be in"],["PromptHistorySearchStatus","The current success/failure of the history search"],["PromptViMode","The vi-specific modes that the prompt can be in"],["ReedlineEvent","Reedline supported actions."],["ReedlineMenu","Allowed menus in Reedline"],["SearchDirection","Defines how to traverse the history when executing a [`SearchQuery`]"],["Signal","Valid ways how `Reedline::read_line()` can return"],["UndoBehavior","Every line change should come with an `UndoBehavior` tag, which can be used to calculate how the change should be reflected on the undo stack"],["ValidationResult","Whether or not the validation shows the input was complete"]],"fn":[["default_emacs_keybindings","Returns the current default emacs keybindings"],["default_vi_insert_keybindings","Default Vi insert keybindings"],["default_vi_normal_keybindings","Default Vi normal keybindings"],["get_reedline_default_keybindings","Get the default keybindings and return a `Vec<(String, String, String, String)>` where String 1 is `mode`, String 2 is `key_modifiers`, String 3 is `key_code`, and Sting 4 is `event`"],["get_reedline_edit_commands","Return a `Vec<String>` of the Reedline [`EditCommand`]s"],["get_reedline_keybinding_modifiers","Return a `Vec` of the Reedline Keybinding Modifiers"],["get_reedline_keycodes","Return a `Vec<String>` of the Reedline `KeyCode`s"],["get_reedline_prompt_edit_modes","Return a `Vec<String>` of the Reedline [`PromptEditMode`]s"],["get_reedline_reedline_events","Return a `Vec<String>` of the Reedline [`ReedlineEvent`]s"]],"mod":[["menu_functions","Collection of common functions that can be used to create menus"]],"struct":[["ColumnarMenu","Menu to present suggestions in a columnar fashion It presents a description of the suggestion if available"],["CursorConfig","Maps cursor shapes to each edit mode (emacs, vi normal & vi insert). If any of the fields is `None`, the cursor won’t get changed by Reedline for that mode."],["DefaultCompleter","A default completer that can detect keywords"],["DefaultHinter","A hinter that use the completions or the history to show a hint to the user"],["DefaultPrompt","Simple [`Prompt`] displaying a configurable left and a right prompt. For more fine-tuned configuration, implement the [`Prompt`] trait. For the default configuration, use [`DefaultPrompt::default()`]"],["DefaultValidator","A default validator which checks for mismatched quotes and brackets"],["Editor","Stateful editor executing changes to the underlying [`LineBuffer`]"],["Emacs","This parses the incoming Events like a emacs style-editor"],["ExampleHighlighter","A simple, example highlighter that shows how to highlight keywords"],["FileBackedHistory","Stateful history that allows up/down-arrow browsing with an internal cursor."],["HistoryItem","Represents one run command with some optional additional context"],["HistoryItemId","Unique ID for the [`HistoryItem`]"],["HistorySessionId","Unique ID for the session in which reedline was run to disambiguate different sessions"],["KeyModifiers","Represents key modifiers (shift, control, alt)."],["Keybindings","Main definition of editor keybindings"],["LineBuffer","In memory representation of the entered line(s) including a cursor position to facilitate cursor based editing."],["ListMenu","Struct to store the menu style Context menu definition"],["MenuTextStyle","Struct to store the menu style"],["Painter","Implementation of the output to the terminal"],["PromptHistorySearch","A representation of the history search"],["Reedline","Line editor engine"],["SearchFilter","Defines additional filters for querying the [`History`]"],["SearchQuery","Query for search in the potentially rich [`History`]"],["SimpleMatchHighlighter","Highlight all matches for a given search string in a line"],["Span","A span of source code, with positions in bytes"],["StyledText","A representation of a buffer with styling, used for doing syntax highlighting"],["Suggestion","Suggestion returned by the Completer"],["Vi","This parses incoming input `Event`s like a Vi-Style editor"]],"trait":[["Completer","A trait that defines how to convert a line and position to a list of potential completions in that position."],["EditMode","Define the style of parsing for the edit events Available default options:"],["Highlighter","The syntax highlighting trait. Implementers of this trait will take in the current string and then return a `StyledText` object, which represents the contents of the original line as styled strings"],["Hinter","A trait that’s responsible for returning the hint for the current line and position Hints are often shown in-line as part of the buffer, showing the user text they can accept or ignore"],["History","Represents a history file or database Data could be stored e.g. in a plain text file, in a `JSONL` file, in a `SQLite` database"],["Menu","Trait that defines how a menu will be printed by the painter"],["Prompt","API to provide a custom prompt."],["Validator","The syntax validation trait. Implementers of this trait will check to see if the current input is incomplete and spans multiple lines"]]};