var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,19,4,4,6,6,8,7,11,0,1,3,1,3,19,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,19,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[4],[6],[8],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[18]]]],[[3,[12,[18]]],3],[1],0,0,[[],19],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[19,[[16,[15]]]],[19,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"sqlparser":{"doc":"SQL Parser for Rust","tn":["ast","dialect","keywords","parser","tokenizer","ADD","ALL","AVRO","Abort","Absolute","AccessMode","Action","Actions","AddColumn","AddConstraint","AddDropSync","AddPartitions","AggregateExpressionWithFilter","All","All","All","All","AllOp","AllSequencesInSchema","AllTablesInSchema","AlterColumn","AlterColumnOperation","AlterIndex","AlterIndexOperation","AlterTable","AlterTableOperation","Always","Analyze","AnalyzeFormat","And","AnyOp","Archive","ArgMode","Array","Array","Array","ArrayAgg","ArrayAgg","ArrayIndex","ArraySubquery","Arrow","ArrowAt","Assert","Assignment","AtArrow","AtAt","AtQuestion","AtTimeZone","BTree","Backward","BackwardAll","Between","BigDecimal","BigInt","BigNumeric","Binary","Binary","BinaryOp","BinaryOperator","BitwiseAnd","BitwiseOr","BitwiseXor","Blob","Boolean","Boolean","Both","ByDefault","Bytea","CLUSTERED","Cache","Cache","Cascade","Cascade","Case","Cast","Ceil","Century","ChangeColumn","Char","CharLargeObject","CharLengthUnits","CharVarying","Character","CharacterLargeObject","CharacterLength","CharacterSet","CharacterVarying","Characters","Check","Check","Clob","Close","CloseCursor","Collate","Colon","Column","ColumnDef","ColumnOption","ColumnOptionDef","Columns","Comment","Comment","CommentObject","Commit","CompositeAccess","CompoundIdentifier","ConflictTarget","Connect","Connection","ContextModifier","Copy","CopyLegacyCsvOption","CopyLegacyOption","CopyOption","CopyTarget","Count","Create","CreateDatabase","CreateFunction","CreateFunctionBody","CreateFunctionUsing","CreateIndex","CreateRole","CreateSchema","CreateSequence","CreateStage","CreateTable","CreateView","CreateVirtualTable","CrossApply","CrossJoin","Csv","Cte","Cube","CurrentRow","Custom","Cycle","DELIMITED","DROP","DataType","Date","Date","DateTimeField","Datetime","Day","Deallocate","Dec","Decade","Decimal","Declare","Default","Delete","Delete","DeleteRows","Delimiter","Delimiter","Derived","DialectSpecific","Directory","Discard","DiscardObject","Distinct","Divide","DoNothing","DoUpdate","DoUpdate","DollarQuotedString","DollarQuotedString","Double","DoubleDollarDef","DoublePrecision","DoubleQuotedByteStringLiteral","DoubleQuotedString","Dow","Doy","Drop","Drop","DropColumn","DropConstraint","DropDefault","DropFunction","DropFunctionDesc","DropFunctionOption","DropNotNull","DropPartitions","DropPrimaryKey","DuplicateKeyUpdate","Empty","Encoding","Enum","Epoch","Eq","Error","Escape","Escape","EscapedStringLiteral","Event","ExactNumberInfo","Except","ExceptSelectItem","ExcludeSelectItem","Execute","Execute","Exists","ExpStored","Explain","ExplainTable","Expr","Expr","ExprWithAlias","Extract","Fail","Fetch","Fetch","FetchDirection","File","File","FileFormat","FileFormat","First","Float","Floor","Following","ForceNotNull","ForceNotNull","ForceNull","ForceQuote","ForceQuote","ForeignKey","ForeignKey","Format","Forward","ForwardAll","Freeze","FullOuter","FulltextOrSpatial","Function","Function","Function","FunctionArg","FunctionArgExpr","FunctionBehavior","FunctionDefinition","GRAPHVIZ","Generated","GeneratedAs","Grant","GrantObjects","GroupingSets","Groups","Gt","GtEq","Hash","HashArrow","HashLongArrow","HashMinus","Header","Header","HexStringLiteral","HiveDistributionStyle","HiveFormat","HiveIOFormat","HiveRowFormat","Hour","ILike","ILike","IOF","Ident","IdentWithAlias","Identifier","Ignore","Immutable","In","InBooleanMode","InList","InNaturalLanguageMode","InNaturalLanguageModeWithQueryExpansion","InOut","InSubquery","InUnnest","IncrementBy","Index","Index","Index","IndexType","Inner","Insert","Insert","Insert","Int","Integer","Intersect","Interval","Interval","IntroducedString","IsDistinctFrom","IsFalse","IsNotDistinctFrom","IsNotFalse","IsNotNull","IsNotTrue","IsNotUnknown","IsNull","IsTrue","IsUnknown","Isodow","IsolationLevel","Isoyear","JSON","JSON","JSONFILE","Jar","Join","JoinConstraint","JoinOperator","JsonAccess","JsonOperator","Julian","Key","KeyOrIndexDisplay","Kill","KillType","Last","LateralView","Leading","LeftAnti","LeftOuter","LeftSemi","Like","Like","ListAgg","ListAgg","ListAggOnOverflow","Local","LockClause","LockType","LongArrow","Lt","LtEq","MapAccess","MatchAgainst","MatchedDelete","MatchedUpdate","MaxValue","MediumInt","Merge","MergeClause","Microsecond","Microseconds","Millenium","Millennium","Millisecond","Milliseconds","MinMaxValue","MinValue","Minus","Minus","Minute","Modulo","Month","Msck","Multiple","Multiple","Multiply","Mutation","NONE","Named","NamedAuthorization","Nanosecond","Nanoseconds","NationalStringLiteral","Natural","Nested","NestedJoin","Next","NoAction","NoDateTime","NonBlock","None","None","None","None","None","None","None","None","Not","NotEq","NotMatched","NotNull","Nowait","Null","Null","Null","Null","NullPassword","Number","Numeric","Nvarchar","ORC","ObjectName","ObjectType","Octets","Offset","OffsetRows","On","OnCommit","OnConflict","OnConflict","OnConflictAction","OnConstraint","OnInsert","OnUpdate","OperateFunctionArg","Or","OrderByExpr","Out","OuterApply","Overlay","PARQUET","PARTITIONED","PGAbs","PGBitwiseNot","PGBitwiseShiftLeft","PGBitwiseShiftRight","PGBitwiseXor","PGCubeRoot","PGCustomBinaryOperator","PGExp","PGPostfixFactorial","PGPrefixFactorial","PGRegexIMatch","PGRegexMatch","PGRegexNotIMatch","PGRegexNotMatch","PGSquareRoot","PLANS","Password","Password","Pivot","Placeholder","Plus","Plus","Position","Preceding","Precision","PrecisionAndScale","Prepare","PreserveRows","Prior","Privileges","Procedure","Program","QualifiedWildcard","QualifiedWildcard","Quarter","Query","Query","Query","Query","Quote","Quote","RCFILE","Range","RawStringLiteral","ReadCommitted","ReadOnly","ReadUncommitted","ReadWrite","Real","References","ReferentialAction","Regclass","Relative","RenameColumn","RenameConstraint","RenameIndex","RenamePartitions","RenameSelectItem","RenameTable","RepeatableRead","Replace","ReplaceSelectElement","ReplaceSelectItem","Restrict","Restrict","Revoke","RightAnti","RightOuter","RightSemi","Role","Rollback","Rollback","Rollup","Row","Rows","Rows","SEQUENCEFILE","SEQUENCES","SERDE","SKEWED","SYNC","SafeCast","Savepoint","Schema","SchemaName","Schemas","SearchModifier","Second","Select","Select","Select","SelectInto","SelectItem","Sequence","SequenceOptions","Sequences","Serializable","Session","Set","SetDataType","SetDefault","SetDefault","SetExpr","SetNames","SetNamesDefault","SetNotNull","SetNull","SetOperation","SetOperator","SetQuantifier","SetRole","SetTimeZone","SetTransaction","SetVariable","Share","ShowCollation","ShowColumns","ShowCreate","ShowCreateObject","ShowFunctions","ShowStatementFilter","ShowTables","ShowVariable","ShowVariables","SimilarTo","Simple","Single","Single","SingleQuotedByteStringLiteral","SingleQuotedDef","SingleQuotedString","SkipLocked","SmallInt","Some","Spaceship","Specific","SqlOption","SqliteOnConflict","Stable","Stage","StartTransaction","StartWith","Statement","Stdin","Stdout","String","StringConcat","Subquery","Substring","SwapWith","TEMP","TEXT","TEXTFILE","Table","Table","Table","Table","Table","Table","TableAlias","TableConstraint","TableFactor","TableFunction","TableWithJoins","Tables","Temporary","Text","Time","Timestamp","Timezone","TimezoneHour","TimezoneInfo","TimezoneMinute","TinyInt","Top","Trailing","TransactionAccessMode","TransactionIsolationLevel","TransactionMode","Trigger","Trigger","Trim","TrimWhereField","Truncate","Truncate","Truncate","TryCast","Tuple","TypedString","Tz","UNCache","UNNEST","UnQuotedString","UnaryOp","UnaryOperator","Union","Unique","Unique","Unnamed","UnnamedAuthorization","UnnamedExpr","UnsignedBigInt","UnsignedInt","UnsignedInteger","UnsignedMediumInt","UnsignedSmallInt","UnsignedTinyInt","Update","Update","Update","Update","Usage","Use","Using","Uuid","Value","Value","Values","Values","Varbinary","Varchar","View","View","Volatile","Week","Where","Wildcard","Wildcard","WildcardAdditionalOptions","WindowFrame","WindowFrameBound","WindowFrameUnits","WindowSpec","With","WithQueryExpansion","WithTimeZone","WithoutTimeZone","Xor","Year","action","additional_elements","alias","alias","args","args","as_","as_keyword","asc","assignments","behavior","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster_by","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","collation","column_name","columns","conflict_target","cte_tables","data_type","data_type","default","default","default","default","default_expr","distinct","distinct","distinct","distinct","distribute_by","elem","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","escape_quoted_string","explicit_row","expr","expr","expr","expr","fetch","first_element","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","group_by","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","having","helpers","id","ident","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","items","join_operator","joins","language","lateral_col_alias","lateral_view","lateral_view_name","lateral_views","length","limit","limit","location","lock_type","locks","mode","name","name","name","name","name","name","name","name","named","new","nonblock","nulls_first","of","offset","on_overflow","opt_except","opt_exclude","opt_rename","opt_replace","option","options","order_by","order_by","order_by","outer","over","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_by","percent","percent","projection","qualify","quantity","quantity","query","quote_style","recursive","relation","relation","return_","row_format","rows","rows","schema_name","selection","selection","separator","sort_by","special","start_bound","storage","table","table_name","tag","temporary","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","units","unlogged","unnamed","using","value","value","value","value","value","window_frame","with","with_name","with_quote","with_ties","with_ties","within_group","within_group","columns","columns","columns","columns","data_type","using","value","index_name","cascade","cascade","column_def","column_keyword","column_name","column_name","data_type","if_exists","if_exists","if_exists","if_not_exists","if_not_exists","name","new_column_name","new_name","new_name","new_partitions","new_partitions","old_column_name","old_name","old_name","old_partitions","op","options","partitions","table_name","table_name","name","foreign_table","generated_as","generation_expr","is_primary","on_delete","on_update","referred_columns","sequence_options","command","filename","array_expr","collation","column","columns","conditions","data_type","data_type","data_type","data_type","else_result","escape_char","escape_char","escape_char","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","field","field","field","filter","fractional_seconds_precision","high","in","indexes","introducer","key","keys","last_field","leading_field","leading_precision","left","left","list","low","match_value","negated","negated","negated","negated","negated","negated","negated","negated","obj","op","op","operand","operator","opt_search_modifier","overlay_for","overlay_from","overlay_what","pattern","pattern","pattern","results","right","right","subquery","subquery","substring_for","substring_from","time_zone","timestamp","trim_what","trim_where","value","value","value","limit","limit","limit","limit","limit","arg","name","schemas","schemas","columns","columns","columns","num_buckets","on","sorted_by","stored_as_directories","format","input_format","output_format","class","filler","with_count","assignments","columns","predicate","predicate","values","with_privileges_keyword","alias","expr","left","op","right","set_quantifier","admin","after_columns","analyze","args","assignments","authorization_owner","binary","bypassrls","cache_metadata","cascade","cascade","chain","chain","charset_name","clauses","clone","cluster_by","collation","collation_name","columns","columns","columns","columns","columns","columns","comment","comment","compute_statistics","condition","connection_limit","constraints","context_modifier","copy_options","create_db","create_role","cursor","data_type","data_types","db_name","db_name","db_name","default_charset","describe_alias","describe_alias","direction","directory_table_params","engine","extended","extended","external","file_format","file_format","file_format","filter","filter","filter","filter","filter","for_columns","format","from","full","full","func_desc","global","granted_by","granted_by","grantees","grantees","has_as","hive_distribution","hive_formats","hivevar","hold","id","if_exists","if_exists","if_exists","if_exists","if_not_exists","if_not_exists","if_not_exists","if_not_exists","if_not_exists","if_not_exists","if_not_exists","if_not_exists","in_group","in_role","inherit","into","into","into","legacy_options","like","local","local","local","location","location","login","managed_location","materialized","message","modes","modes","modifier","module_args","module_name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","names","names","noscan","obj_name","obj_type","object_name","object_type","object_type","object_type","objects","objects","on","on","on_cluster","on_commit","operation","operation","option","options","options","or","or_replace","or_replace","or_replace","or_replace","order_by","overwrite","overwrite","owned_by","parameters","params","partition_action","partitioned","partitions","partitions","password","path","prepare","privileges","privileges","purge","query","query","query","query","repair","replication","restrict","return_type","returning","returning","returning","role","role_name","schema_name","scroll","selection","selection","sensitive","sequence_options","session","snapshot","source","source","source","stage_params","statement","statement","superuser","table","table","table","table_flag","table_name","table_name","table_name","table_name","table_name","table_name","table_name","table_name","table_name","table_name","table_name","table_properties","target","temporary","temporary","temporary","temporary","to","transient","unique","user","using","using","valid_until","value","value","values","variable","variable","verbose","with_grant_option","with_options","with_options","without_rowid","columns","columns","columns","columns","display_as_key","expr","foreign_table","fulltext","index_type","index_type_display","is_primary","name","name","name","name","on_delete","on_update","opt_index_name","referred_columns","aggregate_function","alias","alias","alias","alias","alias","args","array_expr","expr","lateral","name","name","pivot_alias","pivot_values","subquery","table_alias","table_with_joins","value_column","with_hints","with_offset","with_offset_alias","stmt_create_table","stmt_data_loading","CreateTableBuilder","borrow","borrow_mut","build","clone","clone","clone_clause","clone_into","collation","collation","columns","columns","constraints","constraints","default_charset","default_charset","engine","engine","eq","external","external","file_format","file_format","fmt","from","global","global","hash","hive_distribution","hive_distribution","hive_formats","hive_formats","if_not_exists","if_not_exists","into","like","like","location","location","name","new","on_cluster","on_cluster","on_commit","on_commit","or_replace","or_replace","order_by","order_by","query","query","table_properties","table_properties","temporary","temporary","to_owned","transient","transient","try_from","try_from","try_into","type_id","with_options","with_options","without_rowid","without_rowid","BOOLEAN","DataLoadingOption","DataLoadingOptionType","DataLoadingOptions","ENUM","STRING","StageParamsObject","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","credentials","encryption","endpoint","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","option_name","option_type","options","partial_cmp","partial_cmp","partial_cmp","partial_cmp","storage_integration","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","url","value","AnsiDialect","BigQueryDialect","ClickHouseDialect","Dialect","GenericDialect","HiveDialect","MsSqlDialect","MySqlDialect","PostgreSqlDialect","RedshiftSqlDialect","SQLiteDialect","SnowflakeDialect","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_next_precedence","into","into","into","into","into","into","into","into","into","into","into","is","is_delimited_identifier_start","is_delimited_identifier_start","is_delimited_identifier_start","is_delimited_identifier_start","is_delimited_identifier_start","is_delimited_identifier_start","is_delimited_identifier_start","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_part","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_identifier_start","is_proper_identifier_inside_quotes","is_proper_identifier_inside_quotes","keywords","parse_infix","parse_prefix","parse_statement","parse_statement","parse_statement","parse_statement","supports_filter_during_aggregation","supports_filter_during_aggregation","supports_filter_during_aggregation","supports_within_after_array_aggregation","supports_within_after_array_aggregation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ABORT","ABORT","ABS","ABS","ABSOLUTE","ABSOLUTE","ACTION","ACTION","ADD","ADD","ADMIN","ADMIN","AGAINST","AGAINST","ALL","ALL","ALLOCATE","ALLOCATE","ALL_KEYWORDS","ALL_KEYWORDS_INDEX","ALTER","ALTER","ALWAYS","ALWAYS","ANALYZE","ANALYZE","AND","AND","ANTI","ANTI","ANY","ANY","APPLY","APPLY","ARCHIVE","ARCHIVE","ARE","ARE","ARRAY","ARRAY","ARRAY_AGG","ARRAY_AGG","ARRAY_MAX_CARDINALITY","ARRAY_MAX_CARDINALITY","AS","AS","ASC","ASC","ASENSITIVE","ASENSITIVE","ASSERT","ASSERT","ASYMMETRIC","ASYMMETRIC","AT","AT","ATOMIC","ATOMIC","AUTHORIZATION","AUTHORIZATION","AUTOINCREMENT","AUTOINCREMENT","AUTO_INCREMENT","AUTO_INCREMENT","AVG","AVG","AVRO","AVRO","BACKWARD","BACKWARD","BEGIN","BEGIN","BEGIN_FRAME","BEGIN_FRAME","BEGIN_PARTITION","BEGIN_PARTITION","BETWEEN","BETWEEN","BIGDECIMAL","BIGDECIMAL","BIGINT","BIGINT","BIGNUMERIC","BIGNUMERIC","BINARY","BINARY","BLOB","BLOB","BOOLEAN","BOOLEAN","BOTH","BOTH","BTREE","BTREE","BY","BY","BYPASSRLS","BYPASSRLS","BYTEA","BYTEA","CACHE","CACHE","CALL","CALL","CALLED","CALLED","CARDINALITY","CARDINALITY","CASCADE","CASCADE","CASCADED","CASCADED","CASE","CASE","CAST","CAST","CEIL","CEIL","CEILING","CEILING","CENTURY","CENTURY","CHAIN","CHAIN","CHANGE","CHANGE","CHAR","CHAR","CHARACTER","CHARACTER","CHARACTERS","CHARACTERS","CHARACTER_LENGTH","CHARACTER_LENGTH","CHARSET","CHARSET","CHAR_LENGTH","CHAR_LENGTH","CHECK","CHECK","CLOB","CLOB","CLONE","CLONE","CLOSE","CLOSE","CLUSTER","CLUSTER","COALESCE","COALESCE","COLLATE","COLLATE","COLLATION","COLLATION","COLLECT","COLLECT","COLUMN","COLUMN","COLUMNS","COLUMNS","COMMENT","COMMENT","COMMIT","COMMIT","COMMITTED","COMMITTED","COMPRESSION","COMPRESSION","COMPUTE","COMPUTE","CONDITION","CONDITION","CONFLICT","CONFLICT","CONNECT","CONNECT","CONNECTION","CONNECTION","CONSTRAINT","CONSTRAINT","CONTAINS","CONTAINS","CONVERT","CONVERT","COPY","COPY","COPY_OPTIONS","COPY_OPTIONS","CORR","CORR","CORRESPONDING","CORRESPONDING","COUNT","COUNT","COVAR_POP","COVAR_POP","COVAR_SAMP","COVAR_SAMP","CREATE","CREATE","CREATEDB","CREATEDB","CREATEROLE","CREATEROLE","CREDENTIALS","CREDENTIALS","CROSS","CROSS","CSV","CSV","CUBE","CUBE","CUME_DIST","CUME_DIST","CURRENT","CURRENT","CURRENT_CATALOG","CURRENT_CATALOG","CURRENT_DATE","CURRENT_DATE","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_PATH","CURRENT_ROLE","CURRENT_ROLE","CURRENT_ROW","CURRENT_ROW","CURRENT_SCHEMA","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURRENT_USER","CURSOR","CURSOR","CYCLE","CYCLE","DATA","DATA","DATABASE","DATABASE","DATE","DATE","DATETIME","DATETIME","DAY","DAY","DEALLOCATE","DEALLOCATE","DEC","DEC","DECADE","DECADE","DECIMAL","DECIMAL","DECLARE","DECLARE","DEFAULT","DEFAULT","DELETE","DELETE","DELIMITED","DELIMITED","DELIMITER","DELIMITER","DENSE_RANK","DENSE_RANK","DEREF","DEREF","DESC","DESC","DESCRIBE","DESCRIBE","DETERMINISTIC","DETERMINISTIC","DIRECTORY","DIRECTORY","DISCARD","DISCARD","DISCONNECT","DISCONNECT","DISTINCT","DISTINCT","DISTRIBUTE","DISTRIBUTE","DO","DO","DOUBLE","DOUBLE","DOW","DOW","DOY","DOY","DROP","DROP","DUPLICATE","DUPLICATE","DYNAMIC","DYNAMIC","EACH","EACH","ELEMENT","ELEMENT","ELSE","ELSE","ENCODING","ENCODING","ENCRYPTION","ENCRYPTION","END","END","ENDPOINT","ENDPOINT","END_EXEC","END_EXEC","END_FRAME","END_FRAME","END_PARTITION","END_PARTITION","ENGINE","ENGINE","ENUM","ENUM","EPOCH","EPOCH","EQUALS","EQUALS","ERROR","ERROR","ESCAPE","ESCAPE","EVENT","EVENT","EVERY","EVERY","EXCEPT","EXCEPT","EXCLUDE","EXCLUDE","EXEC","EXEC","EXECUTE","EXECUTE","EXISTS","EXISTS","EXP","EXP","EXPANSION","EXPANSION","EXPLAIN","EXPLAIN","EXTENDED","EXTENDED","EXTERNAL","EXTERNAL","EXTRACT","EXTRACT","FAIL","FAIL","FALSE","FALSE","FETCH","FETCH","FIELDS","FIELDS","FILE","FILE","FILE_FORMAT","FILE_FORMAT","FILTER","FILTER","FIRST","FIRST","FIRST_VALUE","FIRST_VALUE","FLOAT","FLOAT","FLOOR","FLOOR","FOLLOWING","FOLLOWING","FOR","FOR","FORCE","FORCE","FORCE_NOT_NULL","FORCE_NOT_NULL","FORCE_NULL","FORCE_NULL","FORCE_QUOTE","FORCE_QUOTE","FOREIGN","FOREIGN","FORMAT","FORMAT","FORWARD","FORWARD","FRAME_ROW","FRAME_ROW","FREE","FREE","FREEZE","FREEZE","FROM","FROM","FULL","FULL","FULLTEXT","FULLTEXT","FUNCTION","FUNCTION","FUNCTIONS","FUNCTIONS","FUSION","FUSION","GENERATED","GENERATED","GET","GET","GLOBAL","GLOBAL","GRANT","GRANT","GRANTED","GRANTED","GRAPHVIZ","GRAPHVIZ","GROUP","GROUP","GROUPING","GROUPING","GROUPS","GROUPS","HASH","HASH","HAVING","HAVING","HEADER","HEADER","HIVEVAR","HIVEVAR","HOLD","HOLD","HOUR","HOUR","IDENTITY","IDENTITY","IF","IF","IGNORE","IGNORE","ILIKE","ILIKE","IMMUTABLE","IMMUTABLE","IN","IN","INCREMENT","INCREMENT","INDEX","INDEX","INDICATOR","INDICATOR","INHERIT","INHERIT","INNER","INNER","INOUT","INOUT","INPUTFORMAT","INPUTFORMAT","INSENSITIVE","INSENSITIVE","INSERT","INSERT","INT","INT","INTEGER","INTEGER","INTERSECT","INTERSECT","INTERSECTION","INTERSECTION","INTERVAL","INTERVAL","INTO","INTO","IS","IS","ISODOW","ISODOW","ISOLATION","ISOLATION","ISOYEAR","ISOYEAR","JAR","JAR","JOIN","JOIN","JSON","JSON","JSONFILE","JSONFILE","JULIAN","JULIAN","KEY","KEY","KILL","KILL","Keyword","LAG","LAG","LANGUAGE","LANGUAGE","LARGE","LARGE","LAST","LAST","LAST_VALUE","LAST_VALUE","LATERAL","LATERAL","LEAD","LEAD","LEADING","LEADING","LEFT","LEFT","LEVEL","LEVEL","LIKE","LIKE","LIKE_REGEX","LIKE_REGEX","LIMIT","LIMIT","LISTAGG","LISTAGG","LN","LN","LOCAL","LOCAL","LOCALTIME","LOCALTIME","LOCALTIMESTAMP","LOCALTIMESTAMP","LOCATION","LOCATION","LOCKED","LOCKED","LOGIN","LOGIN","LOWER","LOWER","MANAGEDLOCATION","MANAGEDLOCATION","MATCH","MATCH","MATCHED","MATCHED","MATERIALIZED","MATERIALIZED","MAX","MAX","MAXVALUE","MAXVALUE","MEDIUMINT","MEDIUMINT","MEMBER","MEMBER","MERGE","MERGE","METADATA","METADATA","METHOD","METHOD","MICROSECOND","MICROSECOND","MICROSECONDS","MICROSECONDS","MILLENIUM","MILLENIUM","MILLENNIUM","MILLENNIUM","MILLISECOND","MILLISECOND","MILLISECONDS","MILLISECONDS","MIN","MIN","MINUTE","MINUTE","MINVALUE","MINVALUE","MOD","MOD","MODE","MODE","MODIFIES","MODIFIES","MODULE","MODULE","MONTH","MONTH","MSCK","MSCK","MULTISET","MULTISET","MUTATION","MUTATION","NANOSECOND","NANOSECOND","NANOSECONDS","NANOSECONDS","NATIONAL","NATIONAL","NATURAL","NATURAL","NCHAR","NCHAR","NCLOB","NCLOB","NEW","NEW","NEXT","NEXT","NO","NO","NOBYPASSRLS","NOBYPASSRLS","NOCREATEDB","NOCREATEDB","NOCREATEROLE","NOCREATEROLE","NOINHERIT","NOINHERIT","NOLOGIN","NOLOGIN","NONE","NONE","NOREPLICATION","NOREPLICATION","NORMALIZE","NORMALIZE","NOSCAN","NOSCAN","NOSUPERUSER","NOSUPERUSER","NOT","NOT","NOTHING","NOTHING","NOWAIT","NOWAIT","NTH_VALUE","NTH_VALUE","NTILE","NTILE","NULL","NULL","NULLIF","NULLIF","NULLS","NULLS","NUMERIC","NUMERIC","NVARCHAR","NVARCHAR","NoKeyword","OBJECT","OBJECT","OCCURRENCES_REGEX","OCCURRENCES_REGEX","OCTETS","OCTETS","OCTET_LENGTH","OCTET_LENGTH","OF","OF","OFFSET","OFFSET","OLD","OLD","ON","ON","ONLY","ONLY","OPEN","OPEN","OPERATOR","OPERATOR","OPTION","OPTION","OPTIONS","OPTIONS","OR","OR","ORC","ORC","ORDER","ORDER","OUT","OUT","OUTER","OUTER","OUTPUTFORMAT","OUTPUTFORMAT","OVER","OVER","OVERFLOW","OVERFLOW","OVERLAPS","OVERLAPS","OVERLAY","OVERLAY","OVERWRITE","OVERWRITE","OWNED","OWNED","PARAMETER","PARAMETER","PARQUET","PARQUET","PARTITION","PARTITION","PARTITIONED","PARTITIONED","PARTITIONS","PARTITIONS","PASSWORD","PASSWORD","PERCENT","PERCENT","PERCENTILE_CONT","PERCENTILE_CONT","PERCENTILE_DISC","PERCENTILE_DISC","PERCENT_RANK","PERCENT_RANK","PERIOD","PERIOD","PIVOT","PIVOT","PLACING","PLACING","PLANS","PLANS","PORTION","PORTION","POSITION","POSITION","POSITION_REGEX","POSITION_REGEX","POWER","POWER","PRECEDES","PRECEDES","PRECEDING","PRECEDING","PRECISION","PRECISION","PREPARE","PREPARE","PRESERVE","PRESERVE","PRIMARY","PRIMARY","PRIOR","PRIOR","PRIVILEGES","PRIVILEGES","PROCEDURE","PROCEDURE","PROGRAM","PROGRAM","PURGE","PURGE","QUALIFY","QUALIFY","QUARTER","QUARTER","QUERY","QUERY","QUOTE","QUOTE","RANGE","RANGE","RANK","RANK","RCFILE","RCFILE","READ","READ","READS","READS","REAL","REAL","RECURSIVE","RECURSIVE","REF","REF","REFERENCES","REFERENCES","REFERENCING","REFERENCING","REGCLASS","REGCLASS","REGR_AVGX","REGR_AVGX","REGR_AVGY","REGR_AVGY","REGR_COUNT","REGR_COUNT","REGR_INTERCEPT","REGR_INTERCEPT","REGR_R2","REGR_R2","REGR_SLOPE","REGR_SLOPE","REGR_SXX","REGR_SXX","REGR_SXY","REGR_SXY","REGR_SYY","REGR_SYY","RELATIVE","RELATIVE","RELEASE","RELEASE","RENAME","RENAME","REPAIR","REPAIR","REPEATABLE","REPEATABLE","REPLACE","REPLACE","REPLICATION","REPLICATION","RESERVED_FOR_COLUMN_ALIAS","RESERVED_FOR_TABLE_ALIAS","RESTRICT","RESTRICT","RESULT","RESULT","RETURN","RETURN","RETURNING","RETURNING","RETURNS","RETURNS","REVOKE","REVOKE","RIGHT","RIGHT","ROLE","ROLE","ROLLBACK","ROLLBACK","ROLLUP","ROLLUP","ROW","ROW","ROWID","ROWID","ROWS","ROWS","ROW_NUMBER","ROW_NUMBER","SAFE_CAST","SAFE_CAST","SAVEPOINT","SAVEPOINT","SCHEMA","SCHEMA","SCOPE","SCOPE","SCROLL","SCROLL","SEARCH","SEARCH","SECOND","SECOND","SELECT","SELECT","SEMI","SEMI","SENSITIVE","SENSITIVE","SEQUENCE","SEQUENCE","SEQUENCEFILE","SEQUENCEFILE","SEQUENCES","SEQUENCES","SERDE","SERDE","SERIALIZABLE","SERIALIZABLE","SESSION","SESSION","SESSION_USER","SESSION_USER","SET","SET","SETS","SETS","SHARE","SHARE","SHOW","SHOW","SIMILAR","SIMILAR","SKIP","SKIP","SMALLINT","SMALLINT","SNAPSHOT","SNAPSHOT","SOME","SOME","SORT","SORT","SPATIAL","SPATIAL","SPECIFIC","SPECIFIC","SPECIFICTYPE","SPECIFICTYPE","SQL","SQL","SQLEXCEPTION","SQLEXCEPTION","SQLSTATE","SQLSTATE","SQLWARNING","SQLWARNING","SQRT","SQRT","STABLE","STABLE","STAGE","STAGE","START","START","STATIC","STATIC","STATISTICS","STATISTICS","STDDEV_POP","STDDEV_POP","STDDEV_SAMP","STDDEV_SAMP","STDIN","STDIN","STDOUT","STDOUT","STORAGE_INTEGRATION","STORAGE_INTEGRATION","STORED","STORED","STRING","STRING","SUBMULTISET","SUBMULTISET","SUBSTRING","SUBSTRING","SUBSTRING_REGEX","SUBSTRING_REGEX","SUCCEEDS","SUCCEEDS","SUM","SUM","SUPER","SUPER","SUPERUSER","SUPERUSER","SWAP","SWAP","SYMMETRIC","SYMMETRIC","SYNC","SYNC","SYSTEM","SYSTEM","SYSTEM_TIME","SYSTEM_TIME","SYSTEM_USER","SYSTEM_USER","TABLE","TABLE","TABLES","TABLES","TABLESAMPLE","TABLESAMPLE","TBLPROPERTIES","TBLPROPERTIES","TEMP","TEMP","TEMPORARY","TEMPORARY","TEXT","TEXT","TEXTFILE","TEXTFILE","THEN","THEN","TIES","TIES","TIME","TIME","TIMESTAMP","TIMESTAMP","TIMESTAMPTZ","TIMESTAMPTZ","TIMETZ","TIMETZ","TIMEZONE","TIMEZONE","TIMEZONE_HOUR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_MINUTE","TINYINT","TINYINT","TO","TO","TOP","TOP","TRAILING","TRAILING","TRANSACTION","TRANSACTION","TRANSIENT","TRANSIENT","TRANSLATE","TRANSLATE","TRANSLATE_REGEX","TRANSLATE_REGEX","TRANSLATION","TRANSLATION","TREAT","TREAT","TRIGGER","TRIGGER","TRIM","TRIM","TRIM_ARRAY","TRIM_ARRAY","TRUE","TRUE","TRUNCATE","TRUNCATE","TRY_CAST","TRY_CAST","TYPE","TYPE","UESCAPE","UESCAPE","UNBOUNDED","UNBOUNDED","UNCACHE","UNCACHE","UNCOMMITTED","UNCOMMITTED","UNION","UNION","UNIQUE","UNIQUE","UNKNOWN","UNKNOWN","UNLOGGED","UNLOGGED","UNNEST","UNNEST","UNSIGNED","UNSIGNED","UNTIL","UNTIL","UPDATE","UPDATE","UPPER","UPPER","URL","URL","USAGE","USAGE","USE","USE","USER","USER","USING","USING","UUID","UUID","VALID","VALID","VALUE","VALUE","VALUES","VALUES","VALUE_OF","VALUE_OF","VARBINARY","VARBINARY","VARCHAR","VARCHAR","VARIABLES","VARIABLES","VARYING","VARYING","VAR_POP","VAR_POP","VAR_SAMP","VAR_SAMP","VERBOSE","VERBOSE","VERSIONING","VERSIONING","VIEW","VIEW","VIRTUAL","VIRTUAL","VOLATILE","VOLATILE","WEEK","WEEK","WHEN","WHEN","WHENEVER","WHENEVER","WHERE","WHERE","WIDTH_BUCKET","WIDTH_BUCKET","WINDOW","WINDOW","WITH","WITH","WITHIN","WITHIN","WITHOUT","WITHOUT","WORK","WORK","WRITE","WRITE","XOR","XOR","YEAR","YEAR","ZONE","ZONE","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","Expr","IsLateral","IsOptional","Lateral","Mandatory","NotLateral","Optional","Parser","ParserError","ParserError","ParserOptions","QualifiedWildcard","RecursionLimitExceeded","TokenizerError","Wildcard","WildcardExpr","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","consume_token","default","eq","eq","expect_keyword","expect_keywords","expect_one_of_keywords","expect_token","expected","fmt","fmt","from","from","from","from","from","from","from","get_next_interval_precedence","get_next_precedence","index","into","into","into","into","into","into","new","next_token","next_token_no_skip","parse_all_or_distinct","parse_alter","parse_analyze","parse_analyze_format","parse_array_agg_expr","parse_array_expr","parse_array_index","parse_array_subquery","parse_as_query","parse_as_table","parse_assert","parse_assignment","parse_begin","parse_between","parse_cache_table","parse_case_expr","parse_cast_expr","parse_ceil_floor_expr","parse_character_length","parse_close","parse_column_def","parse_columns","parse_comma_separated","parse_commit","parse_commit_rollback_chain","parse_copy","parse_create","parse_create_database","parse_create_external_table","parse_create_function","parse_create_index","parse_create_role","parse_create_schema","parse_create_sequence","parse_create_table","parse_create_view","parse_create_virtual_table","parse_cte","parse_data_type","parse_date_time_field","parse_deallocate","parse_declare","parse_delete","parse_derived_table_factor","parse_discard","parse_drop","parse_escape_char","parse_exact_number_optional_precision_scale","parse_execute","parse_exists_expr","parse_explain","parse_expr","parse_extract_expr","parse_fetch","parse_fetch_statement","parse_file_format","parse_function","parse_function_args","parse_function_definition","parse_grant","parse_grant_permission","parse_grant_revoke_privileges_objects","parse_hive_distribution","parse_hive_formats","parse_identifier","parse_identifier_with_alias","parse_identifiers","parse_in","parse_index_type","parse_infix","parse_insert","parse_interval","parse_interval_expr","parse_join_constraint","parse_keyword","parse_keywords","parse_kill","parse_limit","parse_listagg_expr","parse_literal_string","parse_literal_uint","parse_lock","parse_map_access","parse_map_key","parse_match_against","parse_merge","parse_merge_clauses","parse_msck","parse_not","parse_number_value","parse_object_name","parse_offset","parse_one_of_keywords","parse_optional_alias","parse_optional_args","parse_optional_character_length","parse_optional_column_option","parse_optional_create_function_using","parse_optional_precision","parse_optional_precision_scale","parse_optional_select_item_except","parse_optional_select_item_exclude","parse_optional_select_item_rename","parse_optional_select_item_replace","parse_optional_table_alias","parse_optional_table_constraint","parse_optional_type_modifiers","parse_options","parse_order_by_expr","parse_overlay_expr","parse_parenthesized_column_list","parse_pg_cast","parse_pivot_table_factor","parse_position_expr","parse_precision","parse_prefix","parse_prepare","parse_projection","parse_query","parse_query_body","parse_referential_action","parse_replace_elements","parse_revoke","parse_rollback","parse_row_format","parse_safe_cast_expr","parse_savepoint","parse_select","parse_select_item","parse_set","parse_set_operator","parse_set_quantifier","parse_show","parse_show_collation","parse_show_columns","parse_show_create","parse_show_functions","parse_show_statement_filter","parse_show_tables","parse_sql","parse_sql_option","parse_start_transaction","parse_statement","parse_statements","parse_string_values","parse_subexpr","parse_substring_expr","parse_tab_value","parse_table_and_joins","parse_table_factor","parse_time_functions","parse_top","parse_transaction_modes","parse_trim_expr","parse_trim_where","parse_truncate","parse_try_cast_expr","parse_tsv","parse_uncache_table","parse_update","parse_use","parse_value","parse_values","parse_wildcard_additional_options","parse_wildcard_expr","parse_window_frame","parse_window_frame_bound","parse_window_frame_units","peek_nth_token","peek_token","prev_token","provide","to_owned","to_string","trailing_commas","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_with_sql","type_id","type_id","type_id","type_id","type_id","type_id","with_options","with_recursion_limit","with_tokens","with_tokens_with_locations","Ampersand","Arrow","ArrowAt","AtArrow","AtAt","AtQuestion","AtSign","Backslash","Caret","Char","Colon","Comma","Div","DollarQuotedString","DoubleColon","DoubleEq","DoubleExclamationMark","DoubleQuotedByteStringLiteral","DoubleQuotedString","EOF","Eq","EscapedStringLiteral","ExclamationMark","ExclamationMarkTilde","ExclamationMarkTildeAsterisk","Gt","GtEq","HashArrow","HashLongArrow","HashMinus","HexStringLiteral","LBrace","LBracket","LParen","Location","LongArrow","Lt","LtEq","Minus","Mod","Mul","MultiLineComment","NationalStringLiteral","Neq","Newline","Number","PGCubeRoot","PGSquareRoot","Period","Pipe","Placeholder","Plus","RArrow","RBrace","RBracket","RParen","RawStringLiteral","SemiColon","Sharp","ShiftLeft","ShiftRight","SingleLineComment","SingleQuotedByteStringLiteral","SingleQuotedString","Space","Spaceship","StringConcat","Tab","Tilde","TildeAsterisk","Token","TokenWithLocation","Tokenizer","TokenizerError","Whitespace","Whitespace","Word","Word","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","col","column","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","into","into","keyword","line","line","location","make_keyword","make_word","message","new","new","partial_cmp","partial_cmp","partial_cmp","provide","quote_style","to_ident","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","token","tokenize","tokenize_with_location","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wrap","comment","prefix"],"q":["sqlparser","","","","","sqlparser::astsqlparser::ast::Action","","","","sqlparser::ast::AlterColumnOperation","","","sqlparser::ast::AlterIndexOperation","sqlparser::ast::AlterTableOperation","","","","","","","","","","","","","","","","","","","","","","","","","","","sqlparser::ast::CloseCursor","sqlparser::ast::ColumnOption","","","","","","","","sqlparser::ast::CopyTarget","","sqlparser::ast::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sqlparser::ast::FetchDirection","","","","","sqlparser::ast::FunctionArg","","sqlparser::ast::GrantObjects","","sqlparser::ast::HiveDistributionStyle","","","","","","","sqlparser::ast::HiveIOFormat","","","sqlparser::ast::HiveRowFormat","sqlparser::ast::ListAggOnOverflow","","sqlparser::ast::MergeClause","","","","","sqlparser::ast::Privileges","sqlparser::ast::SelectItem","","sqlparser::ast::SetExpr","","","","sqlparser::ast::Statementsqlparser::ast::TableConstraint","","","","","","","","","","","","","","","","","","","sqlparser::ast::TableFactor","","","","","","","","","","","","","","","","","","","","","sqlparser::ast::helpers","","sqlparser::ast::helpers::stmt_create_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sqlparser::ast::helpers::stmt_data_loading","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sqlparser::dialect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sqlparser::keywordssqlparser::parsersqlparser::tokenizersqlparser::tokenizer::Whitespace",""],"d":["SQL Abstract Syntax Tree (AST) types","","This module defines","SQL Parser","SQL Tokenizer","","","","","","","A privilege on a database object (table, sequence, etc.).","Specific privileges (e.g. <code>SELECT</code>, <code>INSERT</code>)","<code>ADD [COLUMN] [IF NOT EXISTS] &lt;column_def&gt;</code>","<code>ADD &lt;table_constraint&gt;</code>","","Add Partitions","Aggregate function with filter","","All privileges applicable to the object type","","","ALL operation e.g. <code>1 ALL (1)</code> or <code>foo &gt; ALL(bar)</code>, It will be …","Grant privileges on …","Grant privileges on …","<code>ALTER [ COLUMN ]</code>","An <code>ALTER COLUMN</code> (<code>Statement::AlterTable</code>) operation","","","ALTER TABLE","An <code>ALTER TABLE</code> (<code>Statement::AlterTable</code>) operation","","Analyze (Hive)","","","Any operation e.g. <code>1 ANY (1)</code> or <code>foo &gt; ANY(bar)</code>, It will be …","","The mode of an argument in CREATE FUNCTION.","Represents an Array Expression, either <code>ARRAY[..]</code>, or <code>[..]</code>","Arrays","An array expression e.g. <code>ARRAY[1, 2]</code>","An <code>ARRAY_AGG</code> invocation …","The <code>ARRAY_AGG</code> function <code>SELECT ARRAY_AGG(... ORDER BY ...)</code>","An array index expression e.g. <code>(ARRAY[1, 2])[1]</code> or …","An array subquery constructor, e.g. …","-&gt; keeps the value as json","jsonb &lt;@ jsonb -&gt; boolean: Test whether right json …","<code>ASSERT &lt;condition&gt; [AS &lt;message&gt;]</code>","SQL assignment <code>foo = expr</code> as used in SQLUpdate","jsonb @&gt; jsonb -&gt; boolean: Test whether left json contains …","jsonb @@ jsonpath → boolean: Returns the result of a …","jsonb @? jsonpath -&gt; boolean: Does JSON path return any …","AT a timestamp to a different timezone e.g. …","","","","<code>&lt;expr&gt; [ NOT ] BETWEEN &lt;low&gt; AND &lt;high&gt;</code>","This is alias for <code>BigNumeric</code> type used in BigQuery","Big integer with optional display width e.g. BIGINT or …","BigNumeric type used in BigQuery","Fixed-length binary type with optional length e.g.  …","BINARY","Binary operation e.g. <code>1 + 1</code> or <code>foo &gt; bar</code>","Binary operators","","","","Large binary object with optional length e.g. BLOB, …","Boolean","Boolean value true or false","","","Bytea","","…","","","","…","CAST an expression to a different data type e.g. …","","","","Fixed-length char type e.g. CHAR(10)","Large character object with optional length e.g. CHAR …","Possible units for characters, initially based on 2016 …","Char varying type e.g. CHAR VARYING(10)","Fixed-length character type e.g. CHARACTER(10)","Large character object with optional length e.g. CHARACTER …","Information about character length, including length and …","","Character varying type e.g. CHARACTER VARYING(10)","CHARACTERS unit","<code>[ CONSTRAINT &lt;name&gt; ] CHECK (&lt;expr&gt;)</code>","<code>CHECK (&lt;expr&gt;)</code>","Large character object with optional length e.g. CLOB, …","Close - closes the portal underlying an open cursor.","","<code>expr COLLATE collation</code>",": Colon is used by Snowflake (Which is similar to …","","SQL column definition","<code>ColumnOption</code>s are modifiers that follow a column …","An optionally-named <code>ColumnOption</code>: …","","","<code>COMMENT ON ...</code>","","<code>COMMIT [ TRANSACTION | WORK ] [ AND [ NO ] CHAIN ]</code>","CompositeAccess (postgres) eg: SELECT (information_schema._…","Multi-part identifier, e.g. <code>table_alias.column</code> or …","","","","Optional context modifier for statements that can be or …","","A <code>CSV</code> option in <code>COPY</code> statement before PostgreSQL version …","An option in <code>COPY</code> statement before PostgreSQL version 9.0.","An option in <code>COPY</code> statement.","","","","CREATE DATABASE","","Postgres specific feature.","","CREATE INDEX","CREATE ROLE See postgres","CREATE SCHEMA","CreateSequence – define a new sequence CREATE [ { …","","CREATE TABLE","CREATE VIEW","SQLite’s …","CROSS APPLY (non-standard)","","CSV …","A single CTE (used after <code>WITH</code>): …","The <code>CUBE</code> expr.","<code>CURRENT ROW</code>","Custom type such as enums","","","","SQL data types","Date","","","Datetime with optional time precision e.g. MySQL.","","<code>DEALLOCATE [ PREPARE ] { name | ALL }</code>","Dec type with optional precision and scale e.g. DEC(10,2), …","","Decimal type with optional precision and scale e.g. …","DECLARE - Declaring Cursor Variables","<code>DEFAULT &lt;restricted-expr&gt;</code>","DELETE","","","DELIMITER ‘delimiter_character’","DELIMITER [ AS ] ‘delimiter_character’","","Dialect-specific options, such as:","","DISCARD [ ALL | PLANS | SEQUENCES | TEMPORARY | TEMP ]","","","","","","","","","Double","","Double PRECISION e.g. standard, postgresql","B“string value“","","","","DROP","","<code>DROP [ COLUMN ] [ IF EXISTS ] &lt;column_name&gt; [ CASCADE ]</code>","<code>DROP CONSTRAINT [ IF EXISTS ] &lt;name&gt;</code>","<code>DROP DEFAULT</code>","DROP Function","Function describe in DROP FUNCTION.","Function describe in DROP FUNCTION.","<code>DROP NOT NULL</code>","","<code>DROP PRIMARY KEY</code>","ON DUPLICATE KEY UPDATE (MySQL when the key already …","","ENCODING ‘encoding_name’","Enums","","","<code>ON OVERFLOW ERROR</code>","ESCAPE ‘escape_character’","ESCAPE [ AS ] ‘escape_character’","e’string value’ (postgres extension) See Postgres docs …","","Additional information for <code>NUMERIC</code>, <code>DECIMAL</code>, and <code>DEC</code> data …","","Bigquery <code>EXCEPT</code> information, with at least one column.","Snowflake <code>EXCLUDE</code> information.","<code>EXECUTE name [ ( parameter [, ...] ) ]</code>","","An exists expression <code>[ NOT ] EXISTS(SELECT ...)</code>, used in …","","EXPLAIN / DESCRIBE for select_statement","EXPLAIN TABLE Note: this is a MySQL-specific statement. …","An SQL expression of any type.","","An expression, followed by <code>[ AS ] alias</code>","","","","FETCH - retrieve rows from a query using a cursor","Specific direction for FETCH statement","","","External table’s available file format","","","Floating point with optional precision e.g. FLOAT(8)","","<code>&lt;N&gt; FOLLOWING</code> or <code>UNBOUNDED FOLLOWING</code>.","FORCE_NOT_NULL ( column_name [, …] )","FORCE NOT NULL column_name [, …]","FORCE_NULL ( column_name [, …] )","FORCE_QUOTE { ( column_name [, …] ) | * }","FORCE QUOTE { column_name [, …] | * }","A referential integrity constraint (…","A referential integrity constraint (…","FORMAT format_name","","","FREEZE [ boolean ]","","MySQLs fulltext definition. Since the <code>SPATIAL</code> definition …","A function call","Scalar function call e.g. <code>LEFT(foo, 5)</code>","","","","These attributes inform the query optimizer about the …","","","<code>Generated</code>s are modifiers that follow a column definition …","<code>GeneratedAs</code>s are modifiers that follow a column option in …","GRANT privileges ON objects TO grantees","Objects on which privileges are granted in a GRANT …","The <code>GROUPING SETS</code> expr.","","","","","#&gt; Extracts JSON sub-object at the specified path","#&gt;&gt; Extracts JSON sub-object at the specified path as text","jsonb #- text[] -&gt; jsonb: Deletes the field or array …","HEADER [ boolean ]","HEADER","X’hex value’","","","","","","ILIKE (case-insensitive LIKE)","","","An identifier, decomposed into its value or character data …","Single aliased identifier","Identifier e.g. table name or column name","","","","<code>IN BOOLEAN MODE</code>.","<code>[ NOT ] IN (val1, val2, ...)</code>","<code>IN NATURAL LANGUAGE MODE</code>.","<code>IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION</code>.","","<code>[ NOT ] IN (SELECT ...)</code>","<code>[ NOT ] IN UNNEST(array_expression)</code>","","MySQLs index definition for index creation. Not present on …","Display the INDEX keyword","","Indexing method used by that index.","","","INSERT","","Integer with optional display width e.g. INT or INT(11)","Integer with optional display width e.g. INTEGER or …","","Interval","INTERVAL literals, roughly in the following format: …","…","<code>IS DISTINCT FROM</code> operator","<code>IS FALSE</code> operator","<code>IS NOT DISTINCT FROM</code> operator","<code>IS NOT FALSE</code> operator","<code>IS NOT NULL</code> operator","<code>IS NOT TRUE</code> operator","<code>IS NOT UNKNOWN</code> operator","<code>IS NULL</code> operator","<code>IS TRUE</code> operator","<code>IS UNKNOWN</code> operator","","","","JSON type used in BigQuery","","","","","","","JSON access (postgres)  eg: data-&gt;‘tags’","JsonOperator","","Display the KEY keyword","Representation whether a definition can can contains the …","KILL [CONNECTION | QUERY | MUTATION]","","","A hive LATERAL VIEW with potential column aliases","","LEFT ANTI (non-standard)","","LEFT SEMI (non-standard)","LIKE","","A <code>LISTAGG</code> invocation …","The <code>LISTAGG</code> function …","The <code>ON OVERFLOW</code> clause of a LISTAGG invocation","<code>LOCAL</code> identifier, usually related to transactional states.","","","-&gt;&gt; keeps the value as text or int.","","","Access a map-like object by field (e.g. <code>column[&#39;field&#39;]</code> or …","<code>MySQL</code> specific text search function (1).","","","","MySQL medium integer (1) with optional display width e.g. …","","","","","","","","","Can use to describe options in  create sequence or table …","","","","","","","Msck (Hive)","Multiple column names inside parenthesis.","Multiple column names with aliases inside parenthesis.","","","","","Both schema name and authorization identifier specified: …","","","N’string value’","","Nested expression e.g. <code>(foo &gt; bar)</code> or <code>(1)</code>","Represents a parenthesized table factor. The SQL spec only …","","","","","No information about time zone. E.g., TIMESTAMP","No additional information e.g. <code>DECIMAL</code>","Nothing to display","","","Omitting ROW/ROWS is non-standard MySQL quirk.","","No context defined. Each dialect defines the default in …","","","","<code>NOT NULL</code>","","<code>NULL</code>","<code>NULL</code> value","NULL ‘null_string’","NULL [ AS ] ‘null_string’","","Numeric literal","Numeric type with optional precision and scale e.g. …","Variable-length character type e.g. NVARCHAR(10)","","A name of a table, view, custom type, etc., possibly …","","OCTETS unit","","Stores the keyword after <code>OFFSET &lt;number&gt;</code>","","","","ON CONFLICT is a PostgreSQL and Sqlite extension","","","","","Function argument in CREATE OR DROP FUNCTION.","","An <code>ORDER BY</code> expression","","OUTER APPLY (non-standard)","","","","Absolute value, e.g. <code>@ -9</code> (PostgreSQL-specific)","Bitwise Not, e.g. <code>~9</code> (PostgreSQL-specific)","","","","Cube root, e.g. <code>||/27</code> (PostgreSQL-specific)","PostgreSQL-specific custom operator.","","Factorial, e.g. <code>9!</code> (PostgreSQL-specific)","Factorial, e.g. <code>!!9</code> (PostgreSQL-specific)","","","","","Square root, e.g. <code>|/9</code> (PostgreSQL-specific)","","","","Represents PIVOT operation on a table. For example …","<code>?</code> or <code>$</code> Prepared statement arg placeholder","","","","<code>&lt;N&gt; PRECEDING</code> or <code>UNBOUNDED PRECEDING</code>","Only precision information e.g. <code>DECIMAL(10)</code>","Precision and scale information e.g. <code>DECIMAL(10,2)</code>","<code>PREPARE name [ ( data_type [, ...] ) ] AS statement</code>","","","Privileges granted in a GRANT statement or revoked in a …","","","<code>alias.*</code> or even <code>schema.table.*</code>","Qualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>.","","The most complete variant of a <code>SELECT</code> query expression, …","Parenthesized SELECT subquery, which may include more set …","SELECT","","QUOTE ‘quote_character’","QUOTE [ AS ] ‘quote_character’","","","R’string value’ or r’string value’ or r“string …","","","","","Floating point e.g. REAL","","…","Regclass used in postgresql serial","","<code>RENAME [ COLUMN ] &lt;old_column_name&gt; TO &lt;new_column_name&gt;</code>","…","","<code>RENAME TO PARTITION (partition=val)</code>","Snowflake <code>RENAME</code> information.","<code>RENAME TO &lt;table_name&gt;</code>","","","Syntax","Bigquery <code>REPLACE</code> information.","","","REVOKE privileges ON objects FROM grantees","RIGHT ANTI (non-standard)","","RIGHT SEMI (non-standard)","","<code>ROLLBACK [ TRANSACTION | WORK ] [ AND [ NO ] CHAIN ]</code>","","The <code>ROLLUP</code> expr.","","","","","","","","","SAFE_CAST an expression to a different data type e.g. …","SAVEPOINT – define a new savepoint within the current …","","Schema possible naming variants (1).","Grant privileges on specific schemas","Fulltext search modifiers (1).","","A restricted variant of <code>SELECT</code> (without CTEs/<code>ORDER BY</code>), …","Restricted SELECT .. FROM .. HAVING (no ORDER BY or set …","","","One item of the comma-separated list following <code>SELECT</code>","","Can use to describe options in create sequence or table …","Grant privileges on specific sequences","","<code>SESSION</code> identifier","Set","<code>[SET DATA] TYPE &lt;data_type&gt; [USING &lt;expr&gt;]</code>","<code>SET DEFAULT &lt;expr&gt;</code>","","A node in a tree, representing a “query body” …","SET NAMES ‘charset_name’ [COLLATE ‘collation_name’]","SET NAMES DEFAULT","<code>SET NOT NULL</code>","","UNION/EXCEPT/INTERSECT of two queries","","A quantifier for SetOperator.","SET <code>[ SESSION | LOCAL ]</code> ROLE role_name. Examples: ANSI, …","","<code>SET TRANSACTION ...</code>","","","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE TABLE","","SHOW FUNCTIONS","","SHOW TABLES","","SHOW VARIABLES","SIMILAR TO regex","Only schema name specified: <code>&lt;schema name&gt;</code>.","Single column name without parenthesis.","Single column name with alias without parenthesis.","B’string value’","","‘string value’","","Small integer with optional display width e.g. SMALLINT or …","","","","","Sqlite specific syntax","","","<code>{ BEGIN [ TRANSACTION | WORK ] | START TRANSACTION } ...</code>","","A top-level statement (SELECT, INSERT, CREATE, etc.)","","","String","","A parenthesized subquery <code>(SELECT ...)</code>, used in expression …","","‘SWAP WITH &lt;table_name&gt;’","","","","A <code>TABLE</code> command","","","","","","","A table-level constraint, specified in a <code>CREATE TABLE</code> or an","A table name or a parenthesized subquery with an optional …","<code>TABLE(&lt;expr&gt;)[ AS &lt;alias&gt; ]</code>","","Grant privileges on specific tables","","Text","Time with optional time precision and time zone …","Timestamp with optional time precision and time zone …","","","Timestamp and Time data types information about TimeZone …","","Tiny integer with optional display width e.g. TINYINT or …","","","","","","","","","","Truncate (Hive)","","<code>ON OVERFLOW TRUNCATE [ &lt;filler&gt; ] WITH[OUT] COUNT</code>","TRY_CAST an expression to a different data type e.g. …","ROW / TUPLE a single value, such as <code>SELECT (1, 2)</code>","A constant of form <code>&lt;data_type&gt; &#39;value&#39;</code>. This can represent …","Postgresql specific <code>WITH TIME ZONE</code> formatting, for both …","UNCACHE TABLE [ IF EXISTS ]  &lt;table_name&gt;","","Add support of snowflake field:key - key should be a value","Unary operation e.g. <code>NOT foo</code>","Unary operators","","<code>[ CONSTRAINT &lt;name&gt; ] { PRIMARY KEY | UNIQUE } (&lt;columns&gt;)</code>","<code>{ PRIMARY KEY | UNIQUE }</code>","","Only authorization identifier specified: …","Any expression, not followed by <code>[ AS ] alias</code>","Unsigned big integer with optional display width e.g. …","Unsigned integer with optional display width e.g. INT …","Unsigned integer with optional display width e.g. INTGER …","Unsigned medium integer (1) with optional display width …","Unsigned small integer with optional display width e.g. …","Unsigned tiny integer with optional display width e.g. …","","","UPDATE","","","USE","","Uuid type","Primitive SQL values such as number and string","A literal value, such as string, number, date or NULL","","","Variable-length binary with optional length type e.g. …","Variable-length character type e.g. VARCHAR(10)","","","","","","An unqualified <code>*</code>","An unqualified <code>*</code>","Additional options for wildcards, e.g. Snowflake <code>EXCLUDE</code>/…","Specifies the data processed by a window function, e.g. …","Specifies WindowFrame’s <code>start_bound</code> and <code>end_bound</code>","","A window specification (i.e. …","","<code>WITH QUERY EXPANSION</code>.","Temporal type ‘WITH TIME ZONE’. E.g., TIMESTAMP WITH …","Temporal type ‘WITHOUT TIME ZONE’. E.g., TIME WITHOUT …","","","","Additional columns. This list can be empty.","","","","","AS ‘definition’","","Optional <code>ASC</code> or <code>DESC</code>","Column assignments","IMMUTABLE | STABLE | VOLATILE","SELECT orive)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns default value for window frame","","","","","","","","DISTRIBUTE BY (Hive)","The list of expressions between brackets","The right bound of the <code>BETWEEN .. AND</code> clause. The end …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Was there an explict ROWs keyword (MySQL)? …","","","","","…","First guaranteed columneturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","FROM","","GROUP BY","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","HAVING","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","INTO","","","","LANGUAGE lang_name","LATERAL VIEW optional column aliases","LATERAL VIEW","LATERAL VIEW table name","LATERAL VIEWs","Default (if VARYING) or maximum (if not VARYING) length","<code>LIMIT { &lt;N&gt; | ALL }</code>","","","","…","","","","","","","","","","<code>true</code> for  <code>ARRAY[..]</code>, <code>false</code> for <code>[..]</code>","Create a new identifier with the given value and no quotes.","","Optional <code>NULLS FIRST</code> or <code>NULLS LAST</code>","","<code>OFFSET &lt;N&gt; [ { ROW | ROWS } ]</code>","","<code>[EXCEPT...]</code>.","<code>[EXCLUDE...]</code>.","<code>[RENAME ...]</code>.","<code>[REPLACE]</code> BigQuery syntax: …","","","ORDER BY","","","LATERAL VIEW OUTER","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","projection expressions","QUALIFY (Snowflake)","","","","The starting quote if any. Valid quote characters are the …","","","","RETURN expression","","","","","WHERE","WHERE","","SORT BY (Hivesyntax: <code>TOP (&lt;N&gt;) [ PERCENT ] [ WITH TIES ]</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional unit. If not informed, the ANSI handles it as …","","","Returns an unnamed argument.","USING … (Hive only)","","","The value of the identifier without quotes.","","","","WITH (common table expressions, or CTEs)","Returns an argument with name.","Create a new quoted identifier with the given quote and …","","SQL semantic equivalent of LIMIT but with same structure …","","","","","","","","PostgreSQL specific","","","","","&lt;column_def&gt;.","<code>[COLUMN]</code>.","","","","","","","<code>[IF NOT EXISTS]</code>","","","","","","","","","","","","","","","","","","","","","","","","","","A command to execute","The path name of the input or output file.","","","","<code>(&lt;col&gt;, &lt;col&gt;, ...)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The seconds precision can be specified in SQL source as …","","","","","","","","","","","","","","<code>&lt;expr&gt;</code>.","","","","","","","","","","","","","","<code>&lt;search modifier&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional keyword from the spec, ignored in practice","","","","","","","","Columns defined after PARTITION","Carry out the command and show actual run times and other …","","Column assignments","","Causes the cursor to return data in binary rather than in …","","","Whether <code>CASCADE</code> was specified. This will be <code>false</code> when …","","","","","","","","","","","COLUMNS","COLUMNS","","Optional schema","","","","","","","","Non-ANSI optional identifier to inform if the role is …","","","","Cursor name","","","","","","","If true, query used the MySQL <code>DESCRIBE</code> alias for explain","","","","","","","","","","","","","","","","","Optional output format of explain","Table which provide value to be set","","","One or more function to drop","","","","","","","","","","None = Not specified Some(true) = WITH HOLD, specifies …","","An optional <code>IF EXISTS</code> clause. (Non-standard.)","","An optional <code>IF EXISTS</code> clause. (Non-standard.) See …","","","","","","","","","","","","","INTO - optional keyword","Optional, It’s possible to fetch rows form cursor to the …","","WITH options (before PostgreSQL version 9.0)","","","","","","","","","","","","","","","","View name","Table name","","index name","Table name","","Cursor name","Cursor name","","","","","","","","","One or more objects to drop. (ANSI SQL requires exactly …","","","","","The type of the object to drop: TABLE, VIEW, etc.","","","","","","","ClickHouse “ON CLUSTER” clause: …","","","","<code>CASCADE</code> or <code>RESTRICT</code>","WITH options (from PostgreSQL version 9.0)","Table confs","Only for Sqlite","","","","","ClickHouse “ORDER BY “ clause. Note that omitted ORDER …","Overwrite (Hive)","","","","Optional parameters.","","partitioned insert (Hive)","","","","","","","","Hive allows you specify whether the table’s stored data …","","","","Cache table as a Query","","","Whether <code>RESTRICT</code> was specified. This will be <code>false</code> when …","","RETURNING","RETURNING","RETURNING","","Role name. If NONE is specified, then the current role …","…","None = Not specified Some(true) = SCROLL Some(false) = NO …","WHERE","WHERE","None = Not specified Some(true) = INSENSITIVE Some(false) …","","","","A SQL query that specifies what to insert","","","","","A SQL query that specifies what to explain","","whether the insert has the table keyword (Hive)","TABLE","","Table flag","","","","TABLE","TABLE","FROM","","","Table name","Table name","Table name","","The source of ‘COPY FROM’, or the target of ‘COPY TO…","","","","","If true, is a ‘COPY TO’ statement. If false is a ‘…","","","","USING (Snowflake, Postgres)","","","","","VALUES a vector of values to be copied","","","","","","","","","","Referred column identifier list.","Referred column identifier list.","Whether this index starts with KEY (true) or INDEX …","","","Whether this is a <code>FULLTEXT</code> (true) or <code>SPATIAL</code> (false) …","Optional index type.","Whether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …","Whether this is a <code>PRIMARY KEY</code> or just a <code>UNIQUE</code> constraint","","","","Index name.","","","Optional index name.","","","","","","","","Arguments of a table-valued function, as supported by …","","","","","","","","","","","","MSSQL-specific <code>WITH (...)</code> hints such as NOLOCK.","","","","AST types specific to loading and unloading syntax, like …","Builder for create table statement variant (1).","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Dialect-specific precedence override","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Determine if a character starts a quoted identifier. The …","","","","","","","Determine if a character is a valid unquoted identifier …","","","","","","","","","","","","Determine if a character is a valid start character for an …","","","","","","","","","","","","Determine if quoted characters are proper for identifier","Determine if quoted characters are proper for identifier It…","","Dialect-specific infix parser override","Dialect-specific prefix parser override","Dialect-specific statement parser override","","","","Does the dialect support <code>FILTER (WHERE expr)</code> for aggregate …","","","Returns true if the dialect supports …an’t be used as a column alias, so that …","These keywords can’t be used as a table alias, so that …eturns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the next token if it matches the expected token, …","","","","Bail out if the current token is not an expected keyword, …","Bail out if the following tokens are not the expected …","Bail out if the current token is not one of the expected …","Bail out if the current token is not an expected keyword, …","Report unexpected token","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the precedence of the next token With AND, OR, and XOR","Get the precedence of the next token","The index of the first unprocessed token.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a parser for a <code>Dialect</code>","Return the first non-whitespace token that has not yet …","Return the first unprocessed token, possibly whitespace.","Parse either <code>ALL</code> or <code>DISTINCT</code>. Returns <code>true</code> if <code>DISTINCT</code> is …","","","","","Parses an array expression <code>[ex1, ex2, ..]</code> if <code>named</code> is <code>true</code>…","","","Parse ‘AS’ before as query,such as …","Parse <code>CREATE TABLE x AS TABLE y</code>","","Parse a <code>var = expr</code> assignment, used in an UPDATE statement","","Parses <code>BETWEEN &lt;low&gt; AND &lt;high&gt;</code>, assuming the <code>BETWEEN</code> …","Parse a CACHE TABLE statement","","Parse a SQL CAST function e.g. <code>CAST(expr AS FLOAT)</code>","","","","","","Parse a comma-separated list of 1+ items accepted by <code>F</code>","","","Parse a copy statement","Parse a SQL CREATE statement","","","","","","","","","","SQLite-specific <code>CREATE VIRTUAL TABLE</code>","Parse a CTE (<code>alias [( col1, col2, ... )] AS (subquery)</code>)","Parse a SQL datatype (in the context of a CREATE TABLE …","","","","","","","","parse the ESCAPE CHAR portion of LIKE, ILIKE, and SIMILAR …","","","Parse a SQL EXISTS expression e.g. <code>WHERE EXISTS(SELECT ...)</code>…","","Parse a new expression","","Parse a FETCH clause","","","","","","Parse a GRANT statement.","","","","","Parse a simple one-word identifier (possibly quoted, …","Strictly parse <code>identifier AS identifier</code>","Parse identifiers","Parses the parens following the <code>[ NOT ] IN</code> operator","","Parse an operator following an expression","Parse an INSERT statement","Parse an INTERVAL expression.","","","Look for an expected keyword and consume it if it exists","Look for an expected sequence of keywords and consume them …","","Parse a LIMIT clause","Parse a SQL LISTAGG expression, e.g. …","Parse a literal string","Parse an unsigned literal integer/long","Parse a FOR UPDATE/FOR SHARE clause","","Parse a map key string","Parses fulltext expressions (1)","","","","","","Parse a possibly qualified, possibly quoted identifier, …","Parse an OFFSET clause","Look for one of the given keywords and return the one that …","Parse <code>AS identifier</code> (or simply <code>identifier</code> if it’s not a …","","","","","","","Parse an <code>Except</code> information for wildcard select items.","Parse an <code>Exclude</code> information for wildcard select items.","Parse a <code>Rename</code> information for wildcard select items.","Parse a <code>Replace</code> information for wildcard select items.","Parse <code>AS identifier</code> when the AS is describing a …","","","","Parse an expression, optionally followed by ASC or DESC …","","Parse a parenthesized comma-separated list of unqualified, …","Parse a postgresql casting style which is in the form of …","","","","Parse an expression prefix","","Parse a comma-separated list of 1+ SelectItem","Parse a query expression, i.e. a <code>SELECT</code> statement …","Parse a “query body”, which is an expression with …","","","Parse a REVOKE statement","","","Parse a BigQuery SAFE_CAST function e.g. …","","Parse a restricted <code>SELECT</code> statement (no CTEs / <code>UNION</code> / …","Parse a comma-delimited list of projections after SELECT","","","","","","","","","","","Convenience method to parse a string with one or more SQL …","","","Parse a single top-level statement (such as SELECT, …","Parse potentially multiple statements","","Parse tokens until the precedence changes","","","","A table name or a parenthesized subquery, followed by …","","Parse a TOP clause, MSSQL equivalent of LIMIT, that …","","","","","Parse a SQL TRY_CAST function e.g. <code>TRY_CAST(expr AS FLOAT)</code>","Parse a tab separated values in COPY payload","Parse a UNCACHE TABLE statement","","","Parse a literal value (numbers, strings, date/time, …","","Parse an <code>WildcardAdditionalOptions</code> information for …","Parse a new expression including wildcard &amp; qualified …","","Parse <code>CURRENT ROW</code> or …","","Return nth non-whitespace token that has not yet been …","Return the first non-whitespace token that has not yet …","Push back the last one non-whitespace token. Must be …","","","","","","","","","","","","","","","","","Tokenize the sql string and sets this <code>Parser</code>’s state to …","","","","","","","Specify additional parser options","Specify the maximum recursion limit while parsing.","Reset this parser state to parse the specified tokens","Reset this parser to parse the specified token stream","Ampersand <code>&amp;</code>","-&gt;, used as a operator to extract json field in PostgreSQL","jsonb &lt;@ jsonb -&gt; boolean: Test whether right json …","jsonb @&gt; jsonb -&gt; boolean: Test whether left json contains …","jsonb @@ jsonpath → boolean: Returns the result of a …","jsonb @? jsonpath -&gt; boolean: Does JSON path return any …","AtSign <code>@</code> used for PostgreSQL abs operator","Backslash <code>\\\\</code> used in terminating the COPY payload with <code>\\\\.</code>","Caret <code>^</code>","A character that could not be tokenized","Colon <code>:</code>","Comma","Division operator <code>/</code>","Dollar quoted string: i.e: $$string$$ or …","DoubleColon <code>::</code> (used for casting in postgresql)","Double equals sign <code>==</code>","Double Exclamation Mark <code>!!</code> used for PostgreSQL prefix …","Byte string literal: i.e: b“string“ or B“string“","Double quoted string: i.e: “string”","An end-of-file marker, not a real token","Equality operator <code>=</code>","“escaped” string literal, which are an extension to …","Exclamation Mark <code>!</code> used for PostgreSQL factorial operator","<code>!~</code> , a case sensitive not match regular expression …","<code>!~*</code> , a case insensitive not match regular expression …","Greater Than operator <code>&gt;</code>","Greater Than Or Equals operator <code>&gt;=</code>","#&gt; Extracts JSON sub-object at the specified path","#&gt;&gt; Extracts JSON sub-object at the specified path as text","jsonb #- text[] -&gt; jsonb: Deletes the field or array …","Hexadecimal string literal: i.e.: X’deadbeef’","Left brace <code>{</code>","Left bracket <code>[</code>","Left parenthesis <code>(</code>","Location in input string","-&gt;&gt;, used as a operator to extract json field as text in …","Less Than operator <code>&lt;</code>","Less Than Or Equals operator <code>&lt;=</code>","Minus operator <code>-</code>","Modulo Operator <code>%</code>","Multiplication operator <code>*</code>","","“National” string literal: i.e: N’string’","Not Equals operator <code>&lt;&gt;</code> (or <code>!=</code> in some dialects)","","An unsigned numeric literal","<code>||/</code> , a cube root math operator in PostgreSQL","<code>|/</code>, a square root math operator in PostgreSQL","Period (used for compound identifiers or projections into …","Pipe <code>|</code>","<code>?</code> or <code>$</code> , a prepared statement arg placeholder","Plus operator <code>+</code>","Right Arrow <code>=&gt;</code>","Right brace <code>}</code>","Right bracket <code>]</code>","Right parenthesis <code>)</code>","Raw string literal: i.e: r’string’ or R’string’ or …","SemiColon <code>;</code> used as separator for COPY and payload","Sharp <code>#</code> used for PostgreSQL Bitwise XOR operator","<code>&lt;&lt;</code>, a bitwise shift left operator in PostgreSQL","<code>&gt;&gt;</code>, a bitwise shift right operator in PostgreSQL","","Byte string literal: i.e: b’string’ or B’string’","Single quoted string: i.e: ‘string’","","Spaceship operator &lt;=&gt;","String concatenation <code>||</code>","","Tilde <code>~</code> used for PostgreSQL Bitwise NOT operator or case …","<code>~*</code> , a case insensitive match regular expression operator …","SQL Token enumeration","A Token with Location attached to it","SQL Tokenizer","Tokenizer error","","Whitespace (space, tab, etc)","A keyword (like SELECT) or an optionally quoted SQL …","A keyword (like SELECT) or an optionally quoted SQL …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Line column, starting from 1","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the word was not quoted and it matched one of the known …","Line number, starting from 1","","","","","","Create a new SQL tokenizer for the specified SQL statement","","","","","","An identifier can be “quoted” (&lt;delimited identifier&gt; …","","","","","","","","","","","","","Tokenize the statement and produce a vector of tokens","Tokenize the statement and produce a vector of tokens with …","","","","","","","","","","","","","","","","","","","","","","The value of the token, without the enclosing quotes, and …","","",""],"i":[0,0,0,0,0,65,109,87,102,78,98,0,77,6,6,0,6,60,22,77,78,84,60,80,80,6,0,69,0,69,0,15,69,0,18,60,118,0,0,1,60,0,60,60,60,59,59,69,0,59,59,59,60,11,78,78,60,1,1,1,1,106,60,0,18,18,18,1,1,52,55,15,1,93,69,70,16,111,60,60,60,54,6,1,1,0,1,1,1,0,14,1,5,9,14,1,69,0,60,59,67,0,0,0,74,14,69,0,69,60,60,0,79,92,0,69,0,0,0,0,78,79,69,69,0,0,69,69,69,69,69,69,69,69,40,40,106,0,60,64,1,70,94,65,0,1,54,0,1,54,69,1,54,1,69,14,69,79,104,105,106,37,14,69,69,0,22,18,75,0,75,0,52,1,116,1,52,52,54,54,69,104,6,6,8,69,0,0,8,6,6,72,71,105,1,54,18,89,105,107,52,66,0,21,0,0,69,79,60,15,69,69,0,82,28,60,102,0,69,0,103,118,0,95,78,1,60,64,105,107,105,105,107,9,14,105,78,78,105,40,9,0,60,66,0,0,0,0,86,14,0,69,0,60,63,18,18,11,59,59,59,105,107,52,0,0,0,0,54,60,101,95,0,0,60,102,115,114,120,60,120,120,114,60,60,70,9,10,91,0,40,20,69,79,1,1,21,1,60,60,60,60,60,60,60,60,60,60,60,60,54,98,54,1,86,87,118,0,0,0,60,0,54,10,0,69,0,78,0,55,40,40,40,60,101,0,60,0,110,0,0,59,18,18,60,60,108,108,70,1,69,0,54,54,54,54,54,54,0,70,17,18,54,18,54,69,31,32,18,92,93,83,119,54,54,52,41,60,37,78,16,54,0,2,3,10,22,41,44,71,110,17,18,108,14,48,14,52,105,106,68,52,1,1,87,0,0,5,0,0,41,0,0,72,0,74,0,14,0,18,0,114,40,60,87,93,17,17,18,18,18,17,18,18,17,17,18,18,18,18,17,109,0,68,37,52,17,18,60,64,3,3,69,104,78,0,66,103,28,82,54,0,20,69,92,105,107,87,63,52,100,99,100,99,1,79,0,1,78,6,6,7,6,0,6,100,102,0,0,16,111,69,40,40,40,91,69,102,60,44,44,63,87,109,94,93,65,60,69,91,0,80,0,54,0,20,79,0,0,91,0,80,100,110,1,8,8,16,0,69,69,8,16,20,0,0,69,69,69,69,47,69,69,69,0,69,0,69,69,69,60,119,31,32,52,116,52,48,1,71,18,84,0,0,115,91,69,70,0,103,103,1,18,60,60,6,109,86,87,0,20,37,66,67,91,0,0,0,37,0,80,79,1,1,1,54,54,0,54,1,0,55,0,0,0,66,79,60,0,69,79,89,60,60,60,2,69,37,52,60,0,21,9,14,83,119,28,1,1,1,1,1,1,20,47,69,79,79,69,41,1,0,60,0,20,1,1,66,91,115,54,101,28,82,0,0,0,0,0,0,120,2,2,18,54,73,33,27,29,85,112,117,35,42,76,117,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,12,35,38,73,26,12,113,30,62,96,117,113,24,85,88,90,24,58,62,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,0,50,35,42,88,90,19,33,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,63,63,64,64,65,65,66,66,67,67,68,69,69,70,70,71,72,72,73,73,74,74,75,75,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,94,95,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,24,27,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,24,0,81,29,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,24,34,39,36,117,25,25,25,24,4,19,90,96,46,19,113,12,13,38,51,85,97,112,113,58,56,46,42,46,19,88,30,30,30,30,13,12,19,61,90,25,85,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,61,45,49,24,24,45,49,27,56,26,36,39,117,96,43,50,23,24,76,88,24,85,62,96,51,23,53,51,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,69,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,4,62,51,113,117,43,53,56,81,97,61,19,113,56,45,49,88,90,170,171,172,173,174,174,175,176,177,178,179,179,178,180,181,177,178,182,179,183,177,184,181,185,186,183,184,181,185,186,180,181,182,187,188,189,190,191,191,192,190,190,190,191,193,194,195,196,197,198,199,200,201,202,203,199,204,205,206,207,208,209,195,210,204,205,206,211,200,201,202,212,213,214,215,216,217,218,196,219,212,213,214,219,220,210,215,221,222,207,197,220,220,220,223,224,208,210,198,208,209,195,210,204,205,206,225,221,224,211,199,223,198,218,218,218,204,205,206,199,223,224,209,225,216,216,226,226,217,217,222,203,220,227,228,229,230,231,232,232,233,234,235,236,237,236,237,236,237,238,239,239,240,241,241,242,243,242,243,243,244,245,245,246,246,246,246,247,248,249,250,251,247,252,247,253,254,255,256,257,258,259,260,261,260,258,253,248,262,261,260,263,264,265,253,266,247,260,267,265,247,247,268,269,270,271,272,273,260,274,249,275,265,260,276,271,260,277,260,265,278,279,276,271,280,253,249,251,276,271,281,260,282,255,282,255,283,260,260,284,252,285,254,281,264,286,260,287,263,247,288,273,265,269,247,247,247,248,275,259,262,260,277,284,289,260,273,247,273,261,266,290,291,285,287,287,261,260,287,263,292,293,252,275,250,265,294,295,270,296,269,247,254,253,297,297,264,254,298,264,282,255,248,259,260,260,292,293,281,262,283,248,261,260,250,265,260,248,277,269,295,250,299,248,253,300,247,277,294,282,255,254,261,260,252,283,299,247,254,250,248,251,301,247,267,288,252,251,301,252,269,291,291,248,277,259,265,270,249,247,248,251,259,283,253,300,299,248,262,301,263,276,274,283,286,260,262,260,250,265,269,262,260,263,247,301,263,247,284,289,262,284,302,249,282,261,260,260,303,304,305,306,305,307,304,306,305,306,303,303,304,307,305,304,304,306,304,308,309,310,311,312,313,309,312,311,310,309,308,308,308,310,308,313,308,309,312,312,0,0,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,137,0,0,0,137,137,0,135,136,137,138,135,136,137,138,135,136,137,138,135,136,137,138,135,136,137,138,135,135,135,135,136,137,138,135,135,136,136,137,138,138,135,136,137,138,135,136,137,138,135,136,137,138,138,138,136,135,136,137,138,135,135,136,137,138,135,136,138,135,136,137,138,135,136,137,138,135,136,137,138,135,138,0,0,0,0,0,0,0,0,0,0,0,0,142,139,143,140,144,145,146,147,148,141,149,142,139,143,140,144,145,146,147,148,141,149,139,140,141,142,139,143,140,144,145,146,147,148,141,149,142,139,143,140,144,145,146,147,148,141,149,153,142,139,143,140,144,145,146,147,148,141,149,153,153,139,144,145,146,148,149,153,142,139,143,140,144,145,146,147,148,141,149,153,142,139,143,140,144,145,146,147,148,141,149,153,148,0,153,153,153,147,141,149,153,144,147,153,141,142,139,143,140,144,145,146,147,148,141,149,142,139,143,140,144,145,146,147,148,141,149,142,139,143,140,144,145,146,147,148,141,149,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,0,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,0,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,127,0,0,163,159,163,159,0,0,152,0,127,152,152,127,0,163,127,150,152,159,158,163,127,150,152,159,158,152,152,150,158,152,159,150,150,150,150,150,152,152,163,127,150,152,152,159,158,150,150,150,163,127,150,152,159,158,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,152,152,152,158,163,127,150,152,159,158,163,127,150,152,159,158,150,163,127,150,152,159,158,150,150,150,150,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,157,157,157,157,157,157,167,157,157,167,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,167,157,157,167,157,157,167,157,157,0,0,0,0,0,157,0,157,169,157,166,167,168,160,161,169,157,166,167,168,160,161,157,166,167,168,160,157,166,167,168,160,157,166,167,161,168,157,157,166,167,168,160,160,161,157,157,166,166,167,167,168,160,160,161,161,169,157,166,167,168,160,161,157,166,167,169,157,166,167,168,160,161,166,168,161,160,157,157,161,169,160,157,166,167,161,166,166,157,166,167,168,160,157,166,167,160,161,160,169,169,169,157,166,167,168,160,161,169,157,166,167,168,160,161,169,157,166,167,168,160,161,166,160,314,314],"fp":[[4,"DataType"],[4,"TimezoneInfo"],[4,"ExactNumberInfo"],[3,"CharacterLength"],[4,"CharLengthUnits"],[4,"AlterTableOperation"],[4,"AlterIndexOperation"],[4,"AlterColumnOperation"],[4,"TableConstraint"],[4,"KeyOrIndexDisplay"],[4,"IndexType"],[3,"ColumnDef"],[3,"ColumnOptionDef"],[4,"ColumnOption"],[4,"GeneratedAs"],[4,"ReferentialAction"],[4,"UnaryOperator"],[4,"BinaryOperator"],[3,"Query"],[4,"SetExpr"],[4,"SetOperator"],[4,"SetQuantifier"],[3,"Table"],[3,"Select"],[3,"LateralView"],[3,"With"],[3,"Cte"],[4,"SelectItem"],[3,"IdentWithAlias"],[3,"WildcardAdditionalOptions"],[4,"ExcludeSelectItem"],[4,"RenameSelectItem"],[3,"ExceptSelectItem"],[3,"ReplaceSelectItem"],[3,"ReplaceSelectElement"],[3,"TableWithJoins"],[4,"TableFactor"],[3,"TableAlias"],[3,"Join"],[4,"JoinOperator"],[4,"JoinConstraint"],[3,"OrderByExpr"],[3,"Offset"],[4,"OffsetRows"],[3,"Fetch"],[3,"LockClause"],[4,"LockType"],[4,"NonBlock"],[3,"Top"],[3,"Values"],[3,"SelectInto"],[4,"Value"],[3,"DollarQuotedString"],[4,"DateTimeField"],[4,"TrimWhereField"],[3,"Ident"],[3,"ObjectName"],[3,"Array"],[4,"JsonOperator"],[4,"Expr"],[3,"WindowSpec"],[3,"WindowFrame"],[4,"WindowFrameUnits"],[4,"WindowFrameBound"],[4,"AddDropSync"],[4,"ShowCreateObject"],[4,"CommentObject"],[4,"Password"],[4,"Statement"],[4,"SequenceOptions"],[4,"MinMaxValue"],[4,"OnInsert"],[3,"OnConflict"],[4,"ConflictTarget"],[4,"OnConflictAction"],[3,"DoUpdate"],[4,"Privileges"],[4,"FetchDirection"],[4,"Action"],[4,"GrantObjects"],[3,"Assignment"],[4,"FunctionArgExpr"],[4,"FunctionArg"],[4,"CloseCursor"],[3,"Function"],[4,"AnalyzeFormat"],[4,"FileFormat"],[3,"ListAgg"],[4,"ListAggOnOverflow"],[3,"ArrayAgg"],[4,"ObjectType"],[4,"KillType"],[4,"HiveDistributionStyle"],[4,"HiveRowFormat"],[4,"HiveIOFormat"],[3,"HiveFormat"],[3,"SqlOption"],[4,"TransactionMode"],[4,"TransactionAccessMode"],[4,"TransactionIsolationLevel"],[4,"ShowStatementFilter"],[4,"SqliteOnConflict"],[4,"CopyTarget"],[4,"OnCommit"],[4,"CopyOption"],[4,"CopyLegacyOption"],[4,"CopyLegacyCsvOption"],[4,"MergeClause"],[4,"DiscardObject"],[4,"ContextModifier"],[4,"DropFunctionOption"],[3,"DropFunctionDesc"],[3,"OperateFunctionArg"],[4,"ArgMode"],[4,"FunctionBehavior"],[4,"FunctionDefinition"],[3,"CreateFunctionBody"],[4,"CreateFunctionUsing"],[4,"SchemaName"],[4,"SearchModifier"],[4,"Ordering"],[15,"bool"],[15,"str"],[15,"char"],[3,"Formatter"],[6,"Result"],[4,"WildcardExpr"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"CreateTableBuilder"],[3,"Vec"],[3,"Box"],[3,"StageParamsObject"],[3,"DataLoadingOptions"],[4,"DataLoadingOptionType"],[3,"DataLoadingOption"],[3,"BigQueryDialect"],[3,"GenericDialect"],[3,"SnowflakeDialect"],[3,"AnsiDialect"],[3,"ClickHouseDialect"],[3,"HiveDialect"],[3,"MsSqlDialect"],[3,"MySqlDialect"],[3,"PostgreSqlDialect"],[3,"RedshiftSqlDialect"],[3,"SQLiteDialect"],[3,"Parser"],[15,"u8"],[4,"ParserError"],[8,"Dialect"],[3,"Chars"],[3,"Peekable"],[4,"Keyword"],[4,"Token"],[3,"ParserOptions"],[4,"IsOptional"],[3,"TokenWithLocation"],[3,"TokenizerError"],[15,"usize"],[4,"IsLateral"],[15,"u64"],[3,"Demand"],[3,"Word"],[4,"Whitespace"],[3,"Location"],[3,"Tokenizer"],[13,"Insert"],[13,"References"],[13,"Select"],[13,"Update"],[13,"SetDataType"],[13,"SetDefault"],[13,"RenameIndex"],[13,"DropConstraint"],[13,"DropColumn"],[13,"AddColumn"],[13,"AlterColumn"],[13,"ChangeColumn"],[13,"DropPartitions"],[13,"AddPartitions"],[13,"RenameColumn"],[13,"RenameConstraint"],[13,"RenamePartitions"],[13,"RenameTable"],[13,"SwapWith"],[13,"Specific"],[13,"ForeignKey"],[13,"Generated"],[13,"Unique"],[13,"Program"],[13,"File"],[13,"InUnnest"],[13,"Collate"],[13,"MapAccess"],[13,"MatchAgainst"],[13,"Case"],[13,"Cast"],[13,"TryCast"],[13,"SafeCast"],[13,"TypedString"],[13,"Like"],[13,"ILike"],[13,"SimilarTo"],[13,"CompositeAccess"],[13,"InList"],[13,"InSubquery"],[13,"Between"],[13,"UnaryOp"],[13,"Extract"],[13,"Ceil"],[13,"Floor"],[13,"Position"],[13,"Substring"],[13,"Trim"],[13,"Overlay"],[13,"AggregateExpressionWithFilter"],[13,"Interval"],[13,"ArrayIndex"],[13,"IntroducedString"],[13,"JsonAccess"],[13,"BinaryOp"],[13,"Exists"],[13,"AtTimeZone"],[13,"Count"],[13,"Absolute"],[13,"Relative"],[13,"Forward"],[13,"Backward"],[13,"Named"],[13,"AllSequencesInSchema"],[13,"AllTablesInSchema"],[13,"PARTITIONED"],[13,"CLUSTERED"],[13,"SKEWED"],[13,"FileFormat"],[13,"IOF"],[13,"SERDE"],[13,"Truncate"],[13,"MatchedUpdate"],[13,"NotMatched"],[13,"All"],[13,"ExprWithAlias"],[13,"SetOperation"],[13,"CreateRole"],[13,"Insert"],[13,"Explain"],[13,"CreateFunction"],[13,"Update"],[13,"Declare"],[13,"Analyze"],[13,"Drop"],[13,"Revoke"],[13,"Commit"],[13,"Rollback"],[13,"SetNames"],[13,"Merge"],[13,"CreateTable"],[13,"CreateView"],[13,"Copy"],[13,"CreateIndex"],[13,"Comment"],[13,"CreateStage"],[13,"Assert"],[13,"SetRole"],[13,"Close"],[13,"CreateSequence"],[13,"Prepare"],[13,"ShowTables"],[13,"Use"],[13,"CreateDatabase"],[13,"ExplainTable"],[13,"Fetch"],[13,"ShowColumns"],[13,"Directory"],[13,"ShowFunctions"],[13,"ShowVariables"],[13,"ShowCollation"],[13,"DropFunction"],[13,"Grant"],[13,"Cache"],[13,"SetVariable"],[13,"Kill"],[13,"UNCache"],[13,"CreateVirtualTable"],[13,"CreateSchema"],[13,"SetTimeZone"],[13,"StartTransaction"],[13,"SetTransaction"],[13,"AlterTable"],[13,"AlterIndex"],[13,"Deallocate"],[13,"Execute"],[13,"Savepoint"],[13,"ShowCreate"],[13,"Discard"],[13,"Msck"],[13,"Truncate"],[13,"Delete"],[13,"ShowVariable"],[13,"Unique"],[13,"ForeignKey"],[13,"Index"],[13,"FulltextOrSpatial"],[13,"Check"],[13,"Pivot"],[13,"Table"],[13,"Derived"],[13,"TableFunction"],[13,"UNNEST"],[13,"NestedJoin"],[13,"SingleLineComment"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
