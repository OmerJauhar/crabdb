window.SIDEBAR_ITEMS = {"derive":[["Diagnostic",""]],"enum":[["MietteError","Error enum for miette. Used by certain operations in the protocol."],["Severity","[`Diagnostic`] severity. Intended to be used by `ReportHandler`s to change the way different [`Diagnostic`]s are displayed."]],"fn":[["set_hook","Set the error hook."]],"macro":[["bail","Return early with an error."],["ensure","Return early with an error if a condition is not satisfied."],["miette","Construct an ad-hoc error from a string."]],"struct":[["DebugReportHandler","[`ReportHandler`] that renders plain text and avoids extraneous graphics. It’s optimized for screen readers and braille users, but is also used in any non-graphical environments, such as non-TTY output."],["Error","Core Diagnostic wrapper type."],["InstallError","Error indicating that [`set_hook()`] was unable to install the provided [`ErrorHook`]."],["JSONReportHandler","[`ReportHandler`] that renders JSON output. It’s a machine-readable output."],["LabeledSpan","A labeled [`SourceSpan`]."],["MietteSpanContents","Basic implementation of the [`SpanContents`] trait, for convenience."],["NamedSource","Utility struct for when you have a regular [`SourceCode`] type that doesn’t implement `name`. For example [`String`]. Or if you want to override the `name` returned by the `SourceCode`."],["NarratableReportHandler","[`ReportHandler`] that renders plain text and avoids extraneous graphics. It’s optimized for screen readers and braille users, but is also used in any non-graphical environments, such as non-TTY output."],["Report","Core Diagnostic wrapper type."],["SourceOffset","Newtype that represents the [`ByteOffset`] from the beginning of a [`SourceCode`]"],["SourceSpan","Span within a [`SourceCode`] with an associated message."]],"trait":[["Context","Provides the `wrap_err()` method for [`Result`]."],["Diagnostic","Adds rich metadata to your Error that can be used by `Report` to print really nice and human-friendly error messages."],["IntoDiagnostic","Convenience trait that adds a `.into_diagnostic()` method that converts a type implementing [`std::error::Error`] to a [`Result<T, Report>`]."],["ReportHandler","Error Report Handler trait for customizing `miette::Report`"],["SourceCode","Represents readable source code of some sort."],["SpanContents","Contents of a [`SourceCode`] covered by [`SourceSpan`]."],["WrapErr","Provides the `wrap_err()` method for [`Result`]."]],"type":[["ByteOffset","“Raw” type for the byte offset from the beginning of a [`SourceCode`]."],["ErrorHook",""],["Result","type alias for `Result<T, Report>`"]]};